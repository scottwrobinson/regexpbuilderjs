declare class RegExpBuilder {
    private _flags: string;
    private _pregMatchFlags: number | null;
    private _literal: string[];
    private _groupsUsed: number;
    private _min: number;
    private _max: number;
    private _of: string;
    private _ofAny: boolean;
    private _ofGroup: number;
    private _from: string;
    private _notFrom: string;
    private _like: string;
    private _either: string;
    private _reluctant: boolean;
    private _capture: boolean;
    private _captureName: string | null;
  
    constructor();
  
    private clear(): void;
    private flushState(): void;
    private getQuantityLiteral(): string;
    private getCharacterLiteral(): string | null;
    getLiteral(): string;
    private combineGroupNumberingAndGetLiteral(r: RegExpBuilder): string;
    private incrementGroupNumbering(literal: string, increment: number): string;
    getRegExp(): RegExp;
    private addFlag(flag: string): this;
    ignoreCase(): this;
    multiLine(): this;
    globalMatch(): this;
    pregMatchFlags(flags: number): this;
    startOfInput(): this;
    startOfLine(): this;
    endOfInput(): this;
    endOfLine(): this;
    eitherFind(r: string | RegExpBuilder): this;
    private setEither(r: RegExpBuilder): this;
    orFind(r: string | RegExpBuilder): this;
    anyOf(r: (string | RegExpBuilder)[]): this;
    private setOr(r: RegExpBuilder): this;
    neither(r: string | RegExpBuilder): this;
    nor(r: string | RegExpBuilder): this;
    exactly(n: number): this;
    min(n: number): this;
    max(n: number): this;
    of(s: string): this;
    ofAny(): this;
    ofGroup(n: number): this;
    from(s: string[]): this;
    notFrom(s: string[]): this;
    like(r: RegExpBuilder): this;
    reluctantly(): this;
    ahead(r: RegExpBuilder): this;
    notAhead(r: RegExpBuilder): this;
    asGroup(name?: string | null): this;
    then(s: string): this;
    find(s: string): this;
    some(s: string[]): this;
    maybeSome(s: string[]): this;
    maybe(s: string): this;
    anything(): this;
    anythingBut(s: string): this;
    something(): this;
    any(): this;
    lineBreak(): this;
    lineBreaks(): this;
    whitespace(): this;
    notWhitespace(): this;
    tab(): this;
    tabs(): this;
    digit(): this;
    notDigit(): this;
    digits(): this;
    notDigits(): this;
    letter(): this;
    notLetter(): this;
    letters(): this;
    notLetters(): this;
    lowerCaseLetter(): this;
    lowerCaseLetters(): this;
    upperCaseLetter(): this;
    upperCaseLetters(): this;
    append(r: RegExpBuilder): this;
    optional(r: RegExpBuilder): this;
    private sanitize(s: string): string;
    getNew(): RegExpBuilder;
}
  
export = RegExpBuilder;
  